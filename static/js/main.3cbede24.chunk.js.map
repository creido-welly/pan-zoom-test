{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","useState","isPortrait","setIsPortrait","src","className","options","centerContent","disabled","limitToBounds","limitToWrapper","transformEnabled","pan","lockAxisX","lockAxisY","velocityEqualToMove","velocity","pinch","doubleClick","wheel","wheelEnabled","touchPadEnabled","limitsOnWheel","zoomIn","zoomOut","resetTransform","positionX","setDefaultState","positionY","scale","previousScale","Fragment","data-testid","onClick","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"mOAgVeA,MAnTf,WACE,IADa,EAiBuBC,oBAAS,GAjBhC,mBAiBNC,EAjBM,KAiBMC,EAjBN,KAmBPC,EAAMF,EAAa,sBAAwB,uBAEjD,OACE,yBAAKG,UAAU,OAyCT,yBAAKA,UAAU,aACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,gCACb,kBAAC,IAAD,CACEC,QAAS,CACPC,eAnEI,EAoEJC,UAlED,EAmECC,eA/DI,EAgEJC,gBA/DK,EAgELC,kBA1DO,GA4DTC,IAAK,CACHJ,UAAU,EACVK,WAlEA,EAmEAC,WAlEA,EAmEAC,qBA/DU,EAgEVC,UAzEK,GA2EPC,MAAO,CAAET,UAAU,GACnBU,YAAa,CAAEV,UAAU,GACzBW,MAAO,CACLC,cAhFE,EAiFFC,iBAhFU,EAiFVC,eA7EI,KAgFL,gBACCC,EADD,EACCA,OACAC,EAFD,EAECA,QACAC,EAHD,EAGCA,eAEAC,GALD,EAICC,gBAJD,EAKCD,WACAE,EAND,EAMCA,UACAC,EAPD,EAOCA,MACAC,EARD,EAQCA,cARD,IASCxB,QATD,EASYG,cATZ,EAS2BE,iBAT3B,EAS6CH,SAT7C,wIAYC,kBAAC,IAAMuB,SAAP,KACE,yBAAK1B,UAAU,SACb,4BACEA,UAAU,qCACV2B,cAAY,gBACZC,QAAS,WACP9B,GAAeD,GACfuB,MAGDvB,EAAa,gBAAkB,gBAElC,yBAAKG,UAAU,WACf,4BACEA,UAAU,0BACV4B,QAASV,EACTS,cAAY,kBAHd,WAOA,4BACE3B,UAAU,0BACV4B,QAAST,EACTQ,cAAY,mBAHd,YAOA,4BACE3B,UAAU,4BACV4B,QAASR,EACTO,cAAY,gBAHd,UAQF,yBAAK3B,UAAU,WACb,kBAAC,IAAD,KACE,yBACEA,UAAU,OACVD,IAAKA,EACL8B,IAAI,sBAIV,yBAAK7B,UAAU,QACb,qCACA,4BACE,0BAAMA,UAAU,yBAAhB,gBACgBqB,EADhB,MAGA,0BAAMrB,UAAU,yBAAhB,gBACgBuB,EADhB,MAGA,0BAAMvB,UAAU,yBAAhB,WACWwB,GAEX,0BAAMxB,UAAU,yBAAhB,oBACoByB,cC/K1BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.3cbede24.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\nimport PrismaZoom from 'react-prismazoom'\nimport PinchToZoom from 'react-pinch-and-zoom';\nimport usePanZoom from \"use-pan-and-zoom\";\n\n// usePanZoom\nconst Demo = () => {\n  const {\n    transform,\n    panZoomHandlers,\n    setContainer,\n    setPan,\n    setZoom\n  } = usePanZoom({});\n \n  return (\n    <div ref={el => setContainer(el)} {...panZoomHandlers}>\n      <div style={{ transform }}>\n        {/* <p>Drag to ðŸ‘†and scroll / pinch to ðŸ”Ž me!</p> */}\n        <img src=\"photo.jpg\" />\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  const centerContent = true;\n  const dbClickEnabled = true;\n  const disabled = false;\n  const enableWheel = false;\n  const enableTouchPadPinch = true;\n  const enableVelocity = true;\n  const limitToBounds = true;\n  const limitToWrapper = false;\n  const limitsOnWheel = false;\n  const lockAxisX = false;\n  const lockAxisY = false;\n  const panningEnabled = true;\n  const pinchEnabled = true;\n  const transformEnabled = true;\n  const velocityEqualToMove = true;\n\n  const [isPortrait, setIsPortrait] = useState(true);\n\n  const src = isPortrait ? '/photo-portrait.jpg' : '/photo-landscape.jpg';\n\n  return (\n    <div className=\"App\">\n      {/* <div className=\"x\">\n        <PinchToZoom>\n          <img src=\"photo.jpg\" />\n        </PinchToZoom>\n      </div> */}\n      {/* <Demo /> */}\n      {/* <div className=\"x\">\n        <PrismaZoom maxZoom=\"3\">\n          <img src=\"photo.jpg\" />\n          <p>A text that can be zoomed and dragged</p>\n        </PrismaZoom>\n      </div> */}\n\n      {/* <div className=\"a\">\n        <TransformWrapper\n          // defaultPositionX={50}\n          // defaultPositionY={50}\n          defaultScale={0.5}\n          options={{\n            limitToBounds: false,\n            limitToWrapper: true,\n            // centerContent: false\n          }}\n        >\n          {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n            <>\n              <div className=\"tools\">\n                <button onClick={zoomIn}>+</button>\n                <button onClick={zoomOut}>-</button>\n                <button onClick={resetTransform}>x</button>\n              </div>\n              <TransformComponent>\n                <div className=\"b\">\n                  <img src=\"/photo.jpg\" alt=\"\" className=\"img\" />\n                </div>\n              </TransformComponent>\n            </>\n          )}\n        </TransformWrapper>\n      </div> */}\n          <div className=\"container\">\n            <div className=\"row align-items-center\">\n              <div className=\"col-lg-12 order-lg-2 example\">\n                <TransformWrapper\n                  options={{\n                    centerContent,\n                    disabled,\n                    limitToBounds,\n                    limitToWrapper,\n                    transformEnabled,\n                  }}\n                  pan={{\n                    disabled: !panningEnabled,\n                    lockAxisX,\n                    lockAxisY,\n                    velocityEqualToMove,\n                    velocity: enableVelocity,\n                  }}\n                  pinch={{ disabled: !pinchEnabled }}\n                  doubleClick={{ disabled: !dbClickEnabled }}\n                  wheel={{\n                    wheelEnabled: enableWheel,\n                    touchPadEnabled: enableTouchPadPinch,\n                    limitsOnWheel,\n                  }}\n                >\n                  {({\n                    zoomIn,\n                    zoomOut,\n                    resetTransform,\n                    setDefaultState,\n                    positionX,\n                    positionY,\n                    scale,\n                    previousScale,\n                    options: { limitToBounds, transformEnabled, disabled },\n                    ...rest\n                  }) => (\n                    <React.Fragment>\n                      <div className=\"tools\">\n                        <button\n                          className=\"btn-gradient yellow small btn-type\"\n                          data-testid=\"toggle-button\"\n                          onClick={() => {\n                            setIsPortrait(!isPortrait);\n                            resetTransform();\n                          }}\n                        >\n                          {isPortrait ? \"Set landscape\" : \"Set portrait\"}\n                        </button>\n                        <div className=\"spacer\" />\n                        <button\n                          className=\"btn-gradient cyan small\"\n                          onClick={zoomIn}\n                          data-testid=\"zoom-in-button\"\n                        >\n                          zoom in\n                        </button>\n                        <button\n                          className=\"btn-gradient blue small\"\n                          onClick={zoomOut}\n                          data-testid=\"zoom-out-button\"\n                        >\n                          zoom out\n                        </button>\n                        <button\n                          className=\"btn-gradient purple small\"\n                          onClick={resetTransform}\n                          data-testid=\"reset-button\"\n                        >\n                          reset\n                        </button>\n                      </div>\n                      <div className=\"element\">\n                        <TransformComponent>\n                          <img\n                            className=\"zoom\"\n                            src={src}\n                            alt=\"example-element\"\n                          />\n                        </TransformComponent>\n                      </div>\n                      <div className=\"info\">\n                        <h3>State</h3>\n                        <h5>\n                          <span className=\"badge badge-secondary\">\n                            Position x : {positionX}px\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Position y : {positionY}px\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Scale : {scale}\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Previous scale : {previousScale}\n                          </span>\n                        </h5>\n                      </div>\n                      {/* <div className=\"functions\">\n                        <h3>Functions</h3>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (disabled ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"disabled\")}\n                        >\n                          <span /> Disable\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (limitToBounds ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"limitToBounds\")}\n                        >\n                          <span /> Limit bounds\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (limitToWrapper ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"limitToWrapper\")}\n                        >\n                          <span /> Limit to wrapper bounds\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (!rest.pan.disabled ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"panningEnabled\")}\n                        >\n                          <span /> Enable panning\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (!rest.pinch.disabled ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"pinchEnabled\")}\n                        >\n                          <span /> Enable pinch\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (transformEnabled ? \" active\" : \"\")\n                          }\n                          onClick={() =>\n                            this.toggleSetting(\"transformEnabled\")\n                          }\n                        >\n                          <span /> Enable transform\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (!rest.doubleClick.disabled ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"dbClickEnabled\")}\n                        >\n                          <span /> Double click\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (rest.pan.lockAxisX ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"lockAxisX\")}\n                        >\n                          <span /> Lock X axis\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (rest.pan.lockAxisY ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"lockAxisY\")}\n                        >\n                          <span /> Lock Y axis\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (rest.pan.velocityEqualToMove ? \" active\" : \"\")\n                          }\n                          onClick={() =>\n                            this.toggleSetting(\"velocityEqualToMove\")\n                          }\n                        >\n                          <span /> Velocity time based on move\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (rest.pan.velocity ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"enableVelocity\")}\n                        >\n                          <span /> Enable velocity\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (rest.wheel.wheelEnabled ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"enableWheel\")}\n                        >\n                          <span /> Enable wheel\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (rest.wheel.touchPadEnabled ? \" active\" : \"\")\n                          }\n                          onClick={() =>\n                            this.toggleSetting(\"enableTouchPadPinch\")\n                          }\n                        >\n                          <span /> Enable touch pad pinch\n                        </button>\n                        <button\n                          className={\n                            \"btn-gradient grey small\" +\n                            (rest.wheel.limitsOnWheel ? \" active\" : \"\")\n                          }\n                          onClick={() => this.toggleSetting(\"limitsOnWheel\")}\n                        >\n                          <span /> Bound limits on wheel\n                        </button>\n                      </div> */}\n                    </React.Fragment>\n                  )}\n                </TransformWrapper>\n              </div>\n            </div>\n          </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}